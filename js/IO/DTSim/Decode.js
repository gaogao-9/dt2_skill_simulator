(function(global){
	"use strict";
	
	global.IO = global.IO || {};
	global.IO.DTSim = global.IO.DTSim || {};
	global.IO.DTSim.Decode = Decode; //Decode(strArr:String[]):[String[],uint[],Number]
	
	var strDec64 = {"0":0,"1":1,"2":2,"3":3,"4":4,"5":5,"6":6,"7":7,"8":8,"9":9,"a":10,"b":11,"c":12,"d":13,"e":14,"f":15,"g":16,"h":17,"i":18,"j":19,"k":20,"l":21,"m":22,"n":23,"o":24,"p":25,"q":26,"r":27,"s":28,"t":29,"u":30,"v":31,"w":32,"x":33,"y":34,"z":35,"A":36,"B":37,"C":38,"D":39,"E":40,"F":41,"G":42,"H":43,"I":44,"J":45,"K":46,"L":47,"M":48,"N":49,"O":50,"P":51,"Q":52,"R":53,"S":54,"T":55,"U":56,"V":57,"W":58,"X":59,"Y":60,"Z":61,"*":62,"-":63};
	var skillDecHuffman = {"0":0,"10":5,"110":10,"1110":1,"111100":8,"1111010":6,"1111011":7,"1111100":2,"1111101":3,"1111110":4,"1111111":9};
	var powderDecHuffman = {"0":0,"1000000":1,"1000001":2,"1000010":3,"1000011":4,"1000100":5,"1000101":6,"1000110":7,"1000111":8,"1001000":9,"1001001":10,"1001010":11,"1001011":12,"1001100":13,"1001101":14,"1001110":15,"1001111":16,"1010000":17,"1010001":18,"1010010":19,"1010011":20,"1010100":21,"1010101":22,"1010110":23,"1010111":24,"1011000":25,"1011001":26,"1011010":27,"1011011":28,"1011100":29,"1011101":30,"1011110":31,"1011111":32,"110000000":33,"110000001":34,"110000010":35,"110000011":36,"110000100":37,"110000101":38,"110000110":39,"110000111":40,"110001000":41,"110001001":42,"110001010":43,"110001011":44,"110001100":45,"110001101":46,"110001110":47,"110001111":48,"110010000":49,"110010001":50,"110010010":51,"110010011":52,"110010100":53,"110010101":54,"110010110":55,"110010111":56,"110011000":57,"110011001":58,"110011010":59,"110011011":60,"110011100":61,"110011101":62,"110011110":63,"110011111":64,"110100000":65,"110100001":66,"110100010":67,"110100011":68,"110100100":69,"110100101":70,"110100110":71,"110100111":72,"110101000":73,"110101001":74,"110101010":75,"110101011":76,"110101100":77,"110101101":78,"110101110":79,"110101111":80,"110110000":81,"110110001":82,"110110010":83,"110110011":84,"110110100":85,"110110101":86,"110110110":87,"110110111":88,"110111000":89,"110111001":90,"110111010":91,"110111011":92,"110111100":93,"110111101":94,"110111110":95,"110111111":96,"111000000":97,"111000001":98,"111000010":99,"111000011":100,"111000100":101,"111000101":102,"111000110":103,"111000111":104,"111001000":105,"111001001":106,"111001010":107,"111001011":108,"111001100":109,"111001101":110,"111001110":111,"111001111":112,"111010000":113,"111010001":114,"111010010":115,"111010011":116,"111010100":117,"111010101":118,"111010110":119,"111010111":120,"111011000":121,"111011001":122,"111011010":123,"111011011":124,"111011100":125,"111011101":126,"111011110":127,"111011111":128,"111100000":129,"111100001":130,"111100010":131,"111100011":132,"111100100":133,"111100101":134,"111100110":135,"111100111":136,"111101000":137,"111101001":138,"111101010":139,"111101011":140,"111101100":141,"111101101":142,"111101110":143,"111101111":144,"111110000":145,"111110001":146,"111110010":147,"111110011":148,"111110100":149,"111110101":150,"111110110":151,"111110111":152,"111111000000":153,"111111000001":154,"111111000010":155,"111111000011":156,"111111000100":157,"111111000101":158,"111111000110":159,"111111000111":160,"111111001000":161,"111111001001":162,"111111001010":163,"111111001011":164,"111111001100":165,"111111001101":166,"111111001110":167,"111111001111":168,"111111010000":169,"111111010001":170,"111111010010":171,"111111010011":172,"111111010100":173,"111111010101":174,"111111010110":175,"111111010111":176,"111111011000":177,"111111011001":178,"111111011010":179,"111111011011":180,"111111011100":181,"111111011101":182,"111111011110":183,"111111011111":184,"111111100000":185,"111111100001":186,"111111100010":187,"111111100011":188,"111111100100":189,"111111100101":190,"111111100110":191,"111111100111":192,"111111101000":193,"111111101001":194,"111111101010":195,"111111101011":196,"111111101100":197,"111111101101":198,"111111101110":199,"111111101111":200,"1111111100000":201,"1111111100001":202,"1111111100010":203,"1111111100011":204,"1111111100100":205,"1111111100101":206,"1111111100110":207,"1111111100111":208,"1111111101000":209,"1111111101001":210,"1111111101010":211,"1111111101011":212,"1111111101100":213,"1111111101101":214,"1111111101110":215,"1111111101111":216,"1111111110000":217,"1111111110001":218,"1111111110010":219,"1111111110011":220,"1111111110100":221,"1111111110101":222,"1111111110110":223,"1111111110111":224,"111111111100000":225,"111111111100001":226,"111111111100010":227,"111111111100011":228,"111111111100100":229,"111111111100101":230,"111111111100110":231,"111111111100111":232,"111111111101000":233,"111111111101001":234,"111111111101010":235,"111111111101011":236,"111111111101100":237,"111111111101101":238,"111111111101110":239,"111111111101111":240,"111111111110000":241,"111111111110001":242,"111111111110010":243,"111111111110011":244,"111111111110100":245,"111111111110101":246,"111111111110110":247,"111111111110111":248,"111111111111000":249,"111111111111001":250,"111111111111010":251,"111111111111011":252,"111111111111100":253,"111111111111101":254,"111111111111110":255,"111111111111111":256};
	
	function Decode(inStr){
		var bStr = "";
		for(var i=0,iLen=inStr.length;i<iLen;++i){
			bStr += ("00000"+strDec64[inStr.charAt(i)].toString(2)).slice(-6);
		}
		
		var buff = {}; //C言語でいうとこのポインター的な運用
		
		var jobBit = bStr.slice(0,5);
		bStr = bStr.slice(5);
		var jobNameArr = GetJobNameArray(jobBit);
		var skillLength = global.IO.DTSim.GetJobSkillLength(jobBit);
		var flagBit = bStr.slice(0,1);
		bStr = bStr.slice(1);
		var skillArr = DecodeSkill(flagBit,bStr,skillLength,buff);
		bStr = bStr.slice(buff.value);
		var powderNum = DecodePowderNum(bStr,buff);
		
		return [jobNameArr,skillArr,powderNum];
	}
	
	function DecodeSkill(flag,bStr,skillLength,bitLength){
		var skillArr = [];
		var buff = "";
		if(flag === "0"){ //ハフマン符号としてデコード
			for(var i=0,iLen=bStr.length;(skillArr.length<skillLength)&&(i<iLen);++i){
				buff += bStr.charAt(i);
				if(buff.length>7) throw new Error("IO.DTSim.Decode: スキルポイントのデコードに失敗しました("+buff+")");
				if(!(buff in skillDecHuffman)) continue;
				skillArr.push(skillDecHuffman[buff]);
				buff = "";
			}
			if(skillArr.length!==skillLength) throw new Error("IO.DTSim.Decode: skillLengthが一致しません("+skillLength+")");
			bitLength.value = i;
			return skillArr;
		}
		if(flag === "1"){ //固定長(4bit)符号としてデコード
			for(var i=0,iLen=bStr.length;(skillArr.length<skillLength)&&(i<iLen);++i){
				buff += bStr.charAt(i);
				if(buff.length !== 4) continue;
				skillArr.push(parseInt(buff,2));
				buff = "";
			}
			if(skillArr.length!==skillLength) throw new Error("IO.DTSim.Decode: skillLengthが一致しません("+skillLength+")");
			bitLength.value = i;
			return skillArr;
		}
		
		throw new Error("IO.DTSim.Decode: スキルポイントのフラグビットが不明です("+flag+")");
	}
	
	function DecodePowderNum(bStr){
		var buff = "";
		for(var i=0,iLen=bStr.length;i<iLen;++i){
			buff += bStr.charAt(i);
			if(buff.length>15) throw new Error("IO.DTSim.Decode: スキルの素最低個数のデコードに失敗しました("+buff+")");
			if(!(buff in powderDecHuffman)) continue;
			return powderDecHuffman[buff];
		}
		
		throw new Error("IO.DTSim.Decode: スキルの素最低個数のデコードに失敗しました("+bStr+")");
	}
	
	function GetJobNameArray(jobBit){
		switch(jobBit){
			case "00000":
				return ["ファイター","パラディン","ヴァルキリー"];;
			case "00001":
				return ["ファイター","パラディン","侍"];
			case "00010":
				return ["ファイター","バーサーカー","侍"];
			case "00011":
				return ["ファイター","バーサーカー","ダークロード"];
			case "00100":
				return ["マジックユーザー","ソーサレス","ウィッチ"];
			case "00101":
				return ["マジックユーザー","ソーサレス","マジカルプリンセス"];
			case "00110":
				return ["マジックユーザー","エンチャントレス","マジカルプリンセス"];
			case "00111":
				return ["マジックユーザー","エンチャントレス","セージ"];
			case "01000":
				return ["マジックユーザー","プリーステス","セージ"];
			case "01001":
				return ["マジックユーザー","プリーステス","ビショップ"];
			case "01010":
				return ["スカウト","アーチャー","スナイパー"];
			case "01011":
				return ["スカウト","アーチャー","トレジャーハンター"];
			case "01100":
				return ["スカウト","アサシン","トレジャーハンター"];
			case "01101":
				return ["スカウト","アサシン","くノ一"];
			case "01110":
				return ["メイド","バード","ディーヴァ"];
			case "01111":
				return ["メイド","バード","ミストレス"];
			case "10000":
				return ["メイド","ダンサー","ミストレス"];
			case "10001":
				return ["メイド","ダンサー","エトワール"];
			case "10010":
				return ["スピエラー","ドールマスター","ソウルサモナー"];
			case "10011":
				return ["スピエラー","ドールマスター","パピヨン"];
			case "10100":
				return ["スピエラー","トリックスター","パピヨン"];
			case "10101":
				return ["スピエラー","トリックスター","ジョーカー"];
		}
		
		throw new Error("IO.DTSim.Decode: jobBitのデコードに失敗しました("+jobBit+")");
	}
})((this || 0).self || global);